//(AUTO-GENERATED FROM "lua/jobsounds.lua", DO NOT EDIT THIS FILE)
#include "jobsounds_lua_transpiled.h"
const char* JOBSOUNDS_LUA_TRANSPILED =
"-- Adds job sounds.\n"
"-- @ module = true\n"
"--[====[\n"
"\n"
"Job sounds\n"
"===========\n"
"Connects to a socket (tcp), checks the current job of dwarves and sends messages\n"
"\n"
"]====] local script_name = 'jobsounds'\n"
"\n"
"local function init_socket() socket = tcp:connect('127.0.0.1', 56730) end\n"
"\n"
"local function start()\n"
"    luasocket = require(\"plugins.luasocket\")\n"
"    tcp = luasocket.tcp\n"
"    dfhack.println(script_name .. \" connecting...\")\n"
"    socket = nil\n"
"    pcall(init_socket)\n"
"    if (socket ~= nil) then\n"
"        dfhack.println(script_name .. \" connected\")\n"
"        stop = false\n"
"        time_last_send = os.time()\n"
"        loop()\n"
"    else\n"
"        dfhack.println(script_name .. \" could not connect\")\n"
"    end\n"
"end\n"
"\n"
"local function send(msg)\n"
"    if (pcall(socket.send, socket, msg) == true) then\n"
"        time_last_send = os.time()\n"
"    else\n"
"        stop = true\n"
"    end\n"
"end\n"
"\n"
"local function trigger_job_sound(unit, job_type)\n"
"    if (socket ~= nil) then\n"
"        if (df.global.window_z == unit.pos.z and df.global.window_x < unit.pos.x and\n"
"            df.global.window_x + 90 > unit.pos.x and df.global.window_y <\n"
"            unit.pos.y and df.global.window_y + 60 > unit.pos.y) then\n"
"            send(unit.id .. \" \" .. job_type .. \"\\0\")\n"
"        end\n"
"    end\n"
"end\n"
"\n"
"local function handle_dwarf(unit)\n"
"    if (unit.job.current_job ~= nil) then\n"
"        local job_pos = unit.job.current_job.pos\n"
"        local dx = math.abs(job_pos.x - unit.pos.x)\n"
"        local dy = math.abs(job_pos.y - unit.pos.y)\n"
"        local dz = math.abs(job_pos.z - unit.pos.z)\n"
"        if (dx <= 1 and dy <= 1 and dz <= 1) then\n"
"            trigger_job_sound(unit, unit.job.current_job.job_type)\n"
"        end\n"
"    end\n"
"end\n"
"\n"
"local function check_dwarves()\n"
"    for k, unit in ipairs(df.global.world.units.active) do\n"
"        if (dfhack.units.isDwarf(unit)) then handle_dwarf(unit) end\n"
"    end\n"
"end\n"
"\n"
"function loop()\n"
"    if (stop == true) then\n"
"        dfhack.println(script_name .. \" stopped\")\n"
"        return\n"
"    end\n"
"\n"
"    if (df.global.pause_state == false) then check_dwarves() end\n"
"\n"
"    dfhack.timeout(15, 'ticks', loop)\n"
"end\n"
"\n"
"start()\n"
;
